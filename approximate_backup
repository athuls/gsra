package ApproximateAlgorithm;
/*Given 4 points on the bridge, determine the origin of the bridge. Further given any region of interest
 * by the inspector, return all the nodes within the bounding box/region of interest*/

import java.io.IOException;

import Jama.Matrix;

public class Approximate_original
{
	//4 points in GPS and Bridge frame of reference
	double[] gps_p1, gps_p2, gps_p3, gps_p4, bfr_p1, bfr_p2, bfr_p3, bfr_p4; 
	Matrix a,c;	//Matrices 'a' and 'c' denote the points in bridge and GPS frames respectively	
	//For GPS to Bridge transform-> Bcap=[BG] Gcap & Inspector frame to GPS transform-> Icap=[IG] Gcap
	Matrix BG,IG;  
	//1/|Gx|, 1/|Gy|, 1/|Gz| i.e. scaling factors at the location of bridge
	double[] gpsScalingFactors;
	/*bridge_origin->GPS, inspector_origin->GPS, convert_query->IFR point to convert to BFR; 
	* F1 & F2->points representing near and far plane distance for inspector*/
	double[] bridge_origin, inspector_origin, convert_query, inspector_BFR, F1, F2;
	double[] query_point;	//query point in BFR
	//roll, pitch, yaw determine orientation of inspector w.r.t. GPS;
	//FPD_inspector, NPD_inspector-near and far plane distance of cone in IFR;
	//view_angle-angle of view in IFR
	double roll,pitch,yaw, FPD_inspector, NPD_inspector, view_angle;
	int flag1, flag2, flag3, flag4, flag5;
	
	public Approximate_original(double[] pt1, double[] pt2, double[] pt3, double[] pt4, double[] pt5, double[] pt6, double[] pt7, double[] pt8)
	{
		gps_p1=pt1;
		gps_p2=pt2;
		gps_p3=pt3;
		gps_p4=pt4;
		bfr_p1=pt5;
		bfr_p2=pt6;
		bfr_p3=pt7;
		bfr_p4=pt8;
		
		//creating 'a' and 'c' matrices
		double[][] temp2={bfr_p1,bfr_p2,bfr_p3,bfr_p4};
		double[][] temp1= {gps_p1, gps_p2, gps_p3, gps_p4};
		c=new Matrix(temp1);
		a=new Matrix(temp2);
		
		// Given a set of 4 points on a bridge
		BG = computeBGMatrix();	//Compute the BG Matrix
		IG=Matrix.identity(3,3);//Initialize the IG matrix to be undefined in the beginning
		IG.set(0, 0, 0.0d/0.0);
		IG.set(1, 1, 0.0d/0.0);
		IG.set(2, 2, 0.0d/0.0);
		gpsScalingFactors = computeScalingFactors(); //Compute the scaling factors for the bridge
		bridge_origin=computeBridgeorigin(); //compute the bridge origin in GPS
		flag1=0;flag2=0;flag3=0;flag4=0;flag5=0;
	}
	
	Matrix computeBGMatrix()
	{
		/*Each row of Matrix a (3X3) is the set of 3 coordinates of a point in Bridge system
		 * Each row of Matrix c (3X3) is the set of 3 coordinates of a point in GPS*/
		/*Matrix (a[1]-a[2]) [BG]=c[1]-c[2]
		 * 3 pairs of such equations to solve for BG*/
		
		Matrix tempBridge=new Matrix(3,3);
		Matrix tempGPS=new Matrix(3,3);
		
		Matrix Bridge=new Matrix(3,3);
		Matrix GPS=new Matrix(3,3);
		for(int i=0;i<3;i++)
		{
			tempBridge.setMatrix(i,i,0,2,a.getMatrix(0,0,0,2).minus(a.getMatrix(i+1,i+1,0,2)));
			tempGPS.setMatrix(i,i,0,2,c.getMatrix(0,0,0,2).minus(c.getMatrix(i+1,i+1,0,2)));
		}		
		for(int i=0;i<3;i++)
		{
			Bridge.setMatrix(i,i,0,2,tempBridge.getMatrix(i,i,0,2));
			GPS.setMatrix(i,i,0,2,tempGPS.getMatrix(i,i,0,2));
		}
		return (Bridge.solve(GPS));
	}
	
	public Matrix getBGMatrix()
	//Returns BG matrix
	{
		return (computeBGMatrix());
	}
	
	double[] computeScalingFactors()
	{
		//Gcap=[inverse(BG)]*Bcap
		/*Gxcap=magnitude of Gcap[1]
		 * Gycap=magnitude of Gcap[2]
		 * Gzcap=magnitude of Gcap[3]*/
		double[] scale;
		scale=new double[3];
		Matrix invBG=BG.inverse();
		for(int i=0;i<3;i++)
		{
			scale[i]=invBG.getMatrix(i,i,0,2).normF();			
		}
		return scale;
	}
	
	double[] computeBridgeorigin()
	{
		/*[BOx,BOy,BOz]+([a1 a2 a3]*[BG]=[c1 c2 c3])*/
		double[] origin=c.getMatrix(1,1,0,2).minus(a.getMatrix(1,1,0,2).times(BG)).getArray()[0];
		return origin;
	}
	
	public double[] getBridgeOrigin()
	{
		return bridge_origin;
	}
	
	public void setOrientation_inspector(double[] orientation)
	//Set the orientation of the inspector with respect to GPS
	{
		roll=-Math.PI*(orientation[0]/180);
		pitch=-Math.PI*(orientation[1]/180);
		yaw=-Math.PI*(orientation[2]/180);
		flag1=1;
	} 
	
	void computeIGMatrix()
	//Compute and return IG matrix
	{
		/*IG=[Angle Matrix (with z(theta1)->alpha(yaw), x(theta2)->beta(pitch), y(theta3)->gamma(roll))] *
		 * [0,0,scaling_factor[0];0,0,scaling_factor[1];0,0,scaling_factor[2]*/
		if(flag1==1)
		{
			double[][] scaling;
			scaling=new double[1][3];
			scaling[0]=computeScalingFactors();
			Matrix scale=new Matrix(scaling);
			Matrix temp_IG=Matrix.identity(3, 3);
			for(int i=0;i<3;i++)
				temp_IG.set(i,i,1/scale.get(0,i));
			Matrix temp_yaw=new Matrix(3,3);
			Matrix temp_pitch=new Matrix(3,3);
			Matrix temp_roll=new Matrix(3,3);
			Matrix Angle=new Matrix(3,3);
			//Setting the roll, pitch and yaw matrices
			temp_roll.set(0, 0, Math.cos(roll));
			temp_roll.set(0, 2, Math.sin(roll));
			temp_roll.set(1, 1, 1);
			temp_roll.set(2, 0, -Math.sin(roll));
			temp_roll.set(2, 2, Math.cos(roll));
			
			temp_pitch.set(0, 0, 1);
			temp_pitch.set(1, 1, Math.cos(pitch));
			temp_pitch.set(1, 2, -Math.sin(pitch));
			temp_pitch.set(2, 1, Math.sin(pitch));
			temp_pitch.set(2, 2, Math.cos(pitch));
			
			temp_yaw.set(0, 0, Math.cos(yaw));
			temp_yaw.set(0, 1, -Math.sin(yaw));
			temp_yaw.set(1, 0, Math.sin(yaw));
			temp_yaw.set(1, 1, Math.cos(yaw));
			temp_yaw.set(2, 2, 1);
	
			Angle=temp_roll.times(temp_pitch).times(temp_yaw);
			IG=Angle.times(temp_IG);
			flag1=0;
		}
		
	}
	
	public Matrix getIGMatrix()
	//Return the IG matrix
	{
		return IG;
	}
	
	void computeBoundingBoxParameters()
	//Compute bounding box parameters i.e. 2 points and angle representing conic region of interest
	{
			double[] point={0,NPD_inspector,0};
			convert_query=point;
			F1=getBFR_co();
			point[0]=0;
			point[1]=FPD_inspector;
			point[2]=0;
			convert_query=point;
			F2=getBFR_co();

			for(int i=0;i<3;i++)	//see what to do about this
				convert_query[i]=0;
			inspector_BFR=getBFR_co();
			
	}
	
	public void setIFR_origin(double[] origin)
	//Inspector origin in GPS
	{
		inspector_origin=origin;
		flag2=1;
	}
	
	public void setQueryPoint(double[] point)
	//set the query point, to determine if it exists within the bounding box region
	{
		query_point=point;
	}
	
	public void setNPD_FPD(double[] distance)
	//set the FPD and NPD values i.e. Far plane distance and near plane distance, of the inspector
	{
		NPD_inspector=distance[0];
		FPD_inspector=distance[1];	
		flag4=1;
	}
	
	public void setViewAngle(double angle)
	//set the view angle of the cone of interest, for the inspector
	{
		view_angle=Math.PI*(angle/180);
		flag5=1;
	}
	
	public double[] getBFR_co()
	//Convert a query point from IFR coordinates to BFR coordinates
	{
			Matrix temp_point, temp_origin, temp_bridge;
			double[][] temp={convert_query};	//query in IFR
			temp_point=new Matrix(temp);
			double[][] temp1={inspector_origin};	//Inspector origin in GPS
			temp_origin=new Matrix(temp1);
			double[][] temp2={bridge_origin};	//Bridge origin in GPS
			temp_bridge=new Matrix(temp2);
			computeIGMatrix();
			
			return (temp_point.times((BG.times(IG.inverse())).inverse())).plus((temp_origin.minus(temp_bridge)).times(BG.inverse())).getArray()[0];
	}
		
	public static void main(String args[]) throws IOException
	{
		long start1, end1,start2, end2;

		start1=System.nanoTime();
		Approximate_original sel=new Approximate_original(Config.getGPSPoint1(), Config.getGPSPoint2(), Config.getGPSPoint3(), Config.getGPSPoint4(), Config.getBFRPoint1(), Config.getBFRPoint2(), Config.getBFRPoint3(), Config.getBFRPoint4());
		end1=System.nanoTime();
		System.out.println(end1-start1);
		start2=System.nanoTime();
		
		//InspectorParametersInterface positionParameters=new InspectorParameters(sel.BG, sel.gpsScalingFactors, sel.bridge_origin);
		//Set orientation of the inspector 
		sel.setOrientation_inspector(Config.getInspectorOrientation());	//roll, pitch, yaw
		sel.setIFR_origin(Config.getInspectorPosition());
		
		//Set the region of interest (near and far plane distances) 
		//Compute bounding box parameters
		sel.setNPD_FPD(Config.getNpdFpd());
		sel.setViewAngle(Config.getViewAngle());
		sel.computeBoundingBoxParameters();
				
		end2=System.nanoTime();
		System.out.println(end2-start2);
		
		//File handling and bounding box computation section 
		ComputeBoundingBoxInterface boundingBox=new ComputeBoundingBox(sel.inspector_BFR, sel.F1, sel.F2, sel.view_angle);
		boundingBox.captureNodesInBox();
	}			
	
}
