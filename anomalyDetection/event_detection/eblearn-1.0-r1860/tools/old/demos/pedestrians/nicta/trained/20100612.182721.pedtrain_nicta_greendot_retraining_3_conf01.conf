################################################################################
# META_TRAINER CONFIGURATION
# Note: variables starting with "meta_" are reserved for meta configuration

# required variables
meta_command=mtdetect
input_dir= ${HOME}/${machine}/ped/test/inria/all/
nthreads = 4

# optional meta variables ######################################################

# name of this meta job
meta_name=detection_pedtrain_nicta_greendot_retraining_3
# maximum number of cpus to use at the same time
meta_max_cpus=8
# directory where to write outputs of all processes
meta_output_dir=${HOME}/${machine}/pedestrians/out
# extra gnuplot parameters
meta_gnuplot_params="set grid ytics;set ytics;set mytics;set grid mytics;set logscale y; set mxtics; set grid xtics; "

# analyze processes output or not. if 0, the meta_trainer will have no notion
# of iteration and will only send 1 report at the very end.
# if 1, meta_trainer will try to find iteration and other variable values
# in each process' output.
meta_analyze=1

# emailing results or not
meta_send_email=1
# email to use
meta_email=pierre.sermanet@gmail.com
# iterations at which to send an email
#meta_email_iters=0,1,2,5,7,10,15,20,30,50,75,100,200
# send email with this frequency (if email_iters not defined)
meta_email_period=200

# interval in seconds to analyze processes output, and to check who is alive.
meta_watch_interval=30
# variables to minimize, process and iteration with lowest value will
# be used to report best weights, or start consequent training
meta_minimize=test_errors,errors,test_energy,energy
# variables to keep around at each iterations
meta_sticky_vars=job,config,classes
# send n best answers that minimize meta_minimize's value
meta_send_best=5

################################################################################
# LOCAL PROGRAM CONFIGURATION

machine=${HOSTNAME}adata
dset=_nicta

# directories ##################################################################
root=${root2} #${HOME}/${machine}/pedestrians/ds3
root2 = ${HOME}/eblearn/demos/pedestrians/nicta/trained/

# network ######################################################################
net_type=cscsc
net_ih=80
net_iw=32
net_c1h=9
net_c1w=9
net_s1h=2
net_s1w=2
net_c2h=7
net_c2w=5
net_s2h=3
net_s2w=2
net_full=100
absnorm=1
color=0
mirror=0
use_tanh=0
use_shrink=0

# training #####################################################################
ds=1
dsname=ped_nicta_mean80x32_ker7_bg
train=ped_nicta_mean80x32_ker7_bg_train_1
val=ped_nicta_mean80x32_ker7_bg_val_1
eta=.00001
iterations=2
# number of training samples per epoch. comment to ignore.
#epoch_size = 100
train_display=0
# use probabilities to pick samples (easiest less probable)
wsamples=1
# minimum probability of each sample
min_sample_weight=1
# normalize probabiliy by class (1) or globally (0)
wnorm=0
# shuffle samples between passes
shuffle_passes=1
# show each class the same amount of samples or not
balanced_training=1

# retraining ###################################################################
retrain=0
job_name_retraining=
fp_name=
retrain_weights=/home/sermanet/greendotdata/pedestrians//out/pedtrain_nicta_greendot_20100530.204131//20100605.174930.pedtrain_nicta_greendot_retraining_2//best/01//20100605.174930.pedtrain_nicta_greendot_retraining_2_conf03_absnorm_1_eta_.000001_use_shrink_0_net002.mat
retrain_dir= ${HOME}/${machine}/pedestrians/test/inria/Test16/all/

# preprocessing ################################################################
resize=mean
normalization_size=7

# detection ####################################################################
weights=${root2}/${weights_file}
classes=${root2}/20100612.182721.pedtrain_nicta_greendot_retraining_3_conf01_absnorm_1_eta_.00001_use_shrink_0_classes.mat
threshold=-1
gain=1
input_height=-1
input_width=-1
input_max=800
scaling=1.1

pruning = 1
bbhfactor = .9
bbwfactor = .5
bbh_overlap = .1
bbw_overlap = .9

# output saving and display
save_detections=0
# Exit when this number of objects have been saved
save_max=25000
# Only save the first n objects per frame
save_max_per_frame=10
# save each classified frame and make a video out of it
save_video=1
save_video_fps=5
use_original_fps=0
display=1
# only show classified input
minimal_display=1
# sleep in milliseconds after displaying
display_sleep=0
ninternals=1
# demo display variables
queue1=0
qstep1=1
qheight1=5
qwidth1=2
queue2=0
qstep2=50
qheight2=5
qwidth2=5
# pre-camera variables (used before regular camera)
precamera=0
precamdir=${root2}/

# camera options: opencv shmem video directory
camera=directory

# limit of input video duration in seconds, 0 means no limit
input_video_max_duration=0

# step between input frames in seconds, 0 means no step
input_video_sstep=0

# koray unsupervised experiement ###############################################
net_type=cscsc
net_ih=80
net_iw=32
net_c1h=9
net_c1w=9
net_s1h=2
net_s1w=2
net_c2h=7
net_c2w=5
net_s2h=3
net_s2w=2
absnorm=1
color=0
mirror=0
use_tanh=0
use_shrink=0

# do not test on training set
no_training_test=1
# multiply targets -1 and 1 by:
target_factor=1.5

koray=1
koray_dir=/home/sermanet/koray/

#wkoray = enc736401.obj enc736425.obj 
#wkoray = enc736407.obj 
#wkoray = enc736420.obj enc736403.obj 
wkoray=enc736412.obj
#wkoray = enc736430.obj enc736405.obj

table0=${root2}/table0.mat
table1=${root2}/table1.mat
table2=${root2}/table2.mat

#weights_file=20100612.182721.pedtrain_nicta_greendot_retraining_3_conf01_absnorm_1_eta_.00001_use_shrink_0_net002.mat # variable added by metarun
weights_file=20100612.182721.pedtrain_nicta_greendot_retraining_3_conf01_net002.mat # variable added by metarun

