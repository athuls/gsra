################################################################################
# META_TRAINER CONFIGURATION
# Note: variables starting with "meta_" are reserved for meta configuration

# required variables
meta_command = objrec_train

# optional variables
meta_name = face
meta_max_cpus = 8
#meta_output_dir = /home/sermanet/texieradata/face/out
meta_output_dir = /home/sermanet/humairadata/face/out
meta_email = me@mail.com
meta_email_period = 1 # send an email with plots after every n iterations
meta_gnuplot_params ="set grid ytics;set ytics 5;set mytics 5;set grid mytics;"

################################################################################
# LOCAL PROGRAM CONFIGURATION

# directories ##################################################################
ebl= ${HOME}/eblpierre/ # eblearn root
root=/home/sermanet/humairadata/face/ds
#root2=${HOME}/eblearn/demos/face/trained/
#root2=C:\Users\pierre\eblearn\demos\obj\face\trained\

# network ######################################################################
# net_type=cscsc
# net_ih=32
# net_iw=32
# net_c1h=5
# net_c1w=5
# net_s1h=2
# net_s1w=2
# net_c2h=5
# net_c2w=5
# net_s2h=2
# net_s2w=2
# net_full=100
# absnorm=1
# color=0
# mirror=0
# use_tanh = 1

# network ######################################################################
net = cscscf # net archictecture
color = 0 # use color or not
manual_load = 0 # manually load weights for individual modules

arch = ${arch_${net}} # global architecture
mirror = 0 # mirror instead of zero-padding (default)
nonlin = stdsig # stdsig # non-linearity module

# layers
c0 = conv0,addc0,${nonlin}0,abs0,wstd0
s1 = subs1,addc1,${nonlin}1
c2 = conv2,addc2,${nonlin}2,abs2,wstd2
s3 = subs3,addc3,${nonlin}3
c4 = conv4,addc4,${nonlin}4
f5 = linear5,addc5,${nonlin}5

# machines
arch_cscsc = ${c0},${s1},${c2},${s3},${c4}
arch_cscscf = ${c0},${s1},${c2},${s3},${c4},${f5}

# modules parameters
inputh = 96 # input's height
inputw = 96 # input's width
conv0_kerh = 5 # convolution kernel's height
conv0_kerw = 5 # convolution kernel's width
conv0_strideh = 1 # convolution stride in height
conv0_stridew = 1 # convolution stride in width
conv0_table = #${table0_color${color}} # convolution table (optional)
conv0_table_in = 1 # conv input max, used if table file not defined
conv0_table_out = ${table0_max} # features max, used if table file not defined
wstd0_kerh = 5 # normalization kernel's height
wstd0_kerw = 5 # normalization kernel's width
subs1_kerh = 4 # subsampling kernel's height
subs1_kerw = 4 # subsampling kernel's width
subs1_strideh = ${subs1_kerh} # subsampling stride in height
subs1_stridew = ${subs1_kerw} # subsampling stride in width
addc1_weights = # weights to be loaded if manual_load = 1
conv2_kerh = 6 # convolution kernel's height
conv2_kerw = 6 # convolution kernel's width
conv2_strideh = 1 # convolution stride in height
conv2_stridew = 1 # convolution stride in width
conv2_table = ${table1} # convolution table (optional)
conv2_table_in = thickness # use current thickness as max table input
conv2_table_out = ${table1_max} # features max, used if table file not defined
conv2_weights = #${wroot1}${sp0}${sp1}_layer1_convolution_kernel.mat
addc2_weights = #${wroot1}${sp0}${sp1}_layer2_bias_bias.mat
diag2_weights = #${wroot1}${sp0}${sp1}_layer4_diag_coeff.mat
wstd2_kerh = 6 # normalization kernel's height
wstd2_kerw = 6 # normalization kernel's width
subs3_kerh = 3 # subsampling kernel's height
subs3_kerw = 3 # subsampling kernel's width
subs3_strideh = ${subs3_kerh} # subsampling stride in height
subs3_stridew = ${subs3_kerw} # subsampling stride in width
addc3_weights = # weights to be loaded if manual_load = 1
conv4_kerh = 6 # convolution kernel's height
conv4_kerw = 6 # convolution kernel's width
conv4_strideh = 1 # convolution stride in height
conv4_stridew = 1 # convolution stride in width
conv4_table_in = thickness # use current thickness as max table input
conv4_table_out = ${linear5_in} # use number of classes as max table output
linear5_in = 100 # linear module input features size
linear5_out = noutputs # use number of classes as max table output

# tables #######################################################################

tblroot = ${ebl}/tools/data/tables/ # location of table files

# # conv00
# table00 = ${tblroot}/table_2_6_connect_6_fanin_0_density_0.5_uv0_u3_v6.mat

# conv0
table0_max = 8 #64 # full table output max (overridden if table file defined)
# table0_color0 = # no color, use table0_max for full table
# table0_color1 = ${tblroot}/table_3_32_connect_32_fanin_0_density_0.33_yuv0_y26_u29_v32.mat

# # conv1
# tbl=3
# table1_max = 64 # 64 96 128 256
# tbl1_mr1 = ${tblroot}/table_32_64_connect_1664_fanin_26_density_0.81_random.mat
# tbl1_mr2 = ${tblroot}/table_32_64_connect_1664_fanin_26_density_0.81_random.mat
# tbl1_2 = ${tblroot}/table_32_96_connect_2496_fanin_26_density_0.81_random.mat
# tbl1_mr1c = ${tblroot}/table_38_68_connect_2040_fanin_30_density_0.79_random.mat
# tbl1_mr2c = ${tblroot}/table_38_68_connect_2040_fanin_30_density_0.79_random.mat

#tbl_mrc = ${tbl1_3}
#tbl_mr = ${tbl1_1}

table1 = ${tblroot}/table_8_24_connect_96.mat
#table1 = ${tbl1_${net}}

# training #####################################################################
ds=1
val_size=500
dsname=all_mean32x32_ker7_bg_20100223.002945.face_conf00_eta_.00001
train=all_mean32x32_ker7_bg_20100223.002945.face_conf00_eta_.00001_train_500_1
val=all_mean32x32_ker7_bg_20100223.002945.face_conf00_eta_.00001_val_500_1
eta=.000005
iterations=150

# retraining ###################################################################
retrain=1
job_name_retraining=20100223.002945.face_conf00_eta_.00001
fp_name=_20100223.002945.face_conf00_eta_.00001
retrain_weights=/home/sermanet/eblearn/demos/objrec/face/trained//20100223.002945.face_conf00_eta_.00001_net029.mat

# preprocessing ################################################################
resize=mean
normalization_size=7

# tracking ####################################################################
mainsleep = 5
smooth_factor = 1.0
# display tracking
tracking_display = 0

# detection ####################################################################
weights=${root2}/humandetectionkinect_trained_network_2classes_standing_background_log6txt.mat
classes=${root2}/human_train_ds_classes.mat

# weights=${root2}/all_net.mat
# classes=${root2}/all_classes.mat

#weights=${root2}/20100227.175046.face_conf05_eta_.000005_retrain_1_net044.mat
#classes=${root2}/20100227.175046.face_conf05_eta_.000005_retrain_1_classes.mat
threshold=.9 #-.65
gain=1
bias = -64
input_height=120#180#240#180#-1#120#480
input_width=320#520#-1#160#640
input_min = 0 # minimum height or width for minimum scale
input_max = 800 # maximum height or width for maximum scale
# scaling ratio between scales
scaling = 1.1
# scale factor of maximum resolution of the original resolution
max_scale = 1.0
# scale factor of minimum resolution of the original resolution
min_scale = 1.0
nthreads = 4 # number of detection threads
ipp_cores = 1 # number of cores for IPP
# randomize image input list (only works for 'directory' camera).
input_random = 0
# number of passes on the image input list (only works for 'directory' camera).
input_npasses = 1
# height factor to apply to bounding boxes
bbhfactor = 1
# width factor to apply to bounding boxes
bbwfactor = .6
pruning = 1 # prune overlapping bounding boxes or not
# minimum height ratio with smallest bbox to declare overlap
bbh_overlap = .67
# minimum width ratio with smallest bbox to declare overlap
bbw_overlap = 0
#hzpad = .35 # vertical zero padding on each side as ratio of network's min input
#wzpad = .35 # horizontal zero padding on each side as ratio of network's min in
#mem_optimization = 1
confidence_type = 2 # 0: sqrdist 1: single output 2: max other (recommended)
pruning = 1 # 0: no pruning 1: ignore overlapping bb 2: pedestrian custom
max_bb_overlap = .9 # minimum ratio with smallest bbox to declare overlap

# detection display ############################################################
# output saving and display
save_detections=0
save_max=50
# save each classified frame and make a video out of it
save_video=0
# fps at which video should be constructed
save_video_fps=1
# if loaded a video and equal to 1, reuse video's fps
use_original_fps=0
# enable or disable display
display = 1
display_threads = 0 # each thread displays on its own
# only show classified input
minimal_display = 0
silent = 1 # minimize outputs to be printed
sync_outputs = 0 # synchronize output between threads
# display internal states of network
display_states = 0
# sleep in milliseconds after displaying
display_sleep = 0
ninternals=1
# demo display variables
queue1 = 0
qstep1 = 1
qheight1 = 5
qwidth1 = 2
queue2 = 0
qstep2 = 50
qheight2 = 5
qwidth2 = 5
# pre-camera variables (used before regular camera)
precamera = 0
precamdir = ${root2}/

# camera options: v4l2 opencv shmem video directory
# we don't define camera, compiler will set appropriate default cam
camera = kinect # directory # v4l2 #opencv # directory
#device = /dev/video0

# limit of input video duration in seconds, 0 means no limit
input_video_max_duration=0

# step between input frames in seconds, 0 means no step
input_video_sstep=1500

job_name=20100227.175046.face_conf05_eta_.000005_retrain_1 # variable added by meta_trainer

bbox_saving = 0 # 0: none 1: all styles 2: eblearn style 3: caltech style

background_name = background # name of background class (optional)
display_min = 0 # minimum data range to display (optional)
display_max = 255 # maximum data range to display (optional)
preprocessing = 0 # 0: none 1: contrast normalization (optional)
