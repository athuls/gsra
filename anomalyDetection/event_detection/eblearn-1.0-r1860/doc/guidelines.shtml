<html>
  <head>
    <title>EBLearn: Coding Guidelines for Developers</title>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <link rel="stylesheet" href="web/main.css" type="text/css" 
	  media="screen">
    <link rel="stylesheet" href="web/index_004.css" type="text/css" 
	  media="screen">
    <link rel="stylesheet" type="text/css" href="web/styles.css" 
	  media="all">
    <link rel="shortcut icon" href="web/logo2.ico">
  </head>
  <body>
    <!--#include virtual="nav.html" --> 
    <div id="globalWrapper">
      <h1>Coding Guidelines for Developers</h1>
      <p>Those guidelines are intended for developers who contribute
      to eblearn, to provide coherent, easy to read and
      bug-free code.</p>
      <h2>Documentation</h2>
      <ul>
	<li>Comment your code as much as possible so users can
	understand it.</li>
	<li>Use the commenting syntax that can be used
	to automatically generate the online documentation (with Doxygen):</li>
	<ul><li>example: <a href="http://eblearn.sourceforge.net/documentation/libeblearn_html/classebl_1_1linear__module.html"
	target="_blank">linear_module class documentation generated by
	Doxygen</a> and 
	<a href="http://eblearn.svn.sourceforge.net/viewvc/eblearn/trunk/libeblearn/include/ebl_basic.h?view=markup"
	target="_blank">its original input</a>.</li>
	  <li>syntax:</li>
	  <ul>
	    <li>use //! instead of // for comments that you want to
	    appear in the online documentation.</li>
	    <li>use \param to describe a parameter.</li>
	  </ul>
	</ul>
	<li>If you edit some code that is missing documentation, add it.</li>
      </ul>
      <h2>General Architecture</h2>
      <ul>
	<li>The general user interfaces (GUI) have been kept separated
	from the core code to keep it clean and simple and to allow
	users to use only the core functionalities when
	necessary. Thus, try to maintain that separation between
	essential code and non-essential code (e.g. guis are separate in
	libidxgui and libeblearngui and helping tools in libeblearntools).</li>
      </ul>
      <h2>SVN</h2>
      <ul>
	<li>Creating a new branch for bob:<br>
	  svn copy https://eblearn.svn.sourceforge.net/svnroot/eblearn/trunk https://eblearn.svn.sourceforge.net/svnroot/eblearn/branches/bob
	</li>
	<li>Merging the trunk into bob's branch:</li>
	  <ul><li>Find out the latest revision at which a merge was done between
	      the trunk and the branch. Assuming that the merge was documented
	      during the commit, find the revision with 'svn log' from the
	      trunk directory. Or get the branch's creation revision (might
	      run into a lot more conflict):<br>
	      svn log --stop-on-copy</li>
	    <li>Merge trunk into branch, assuming branch's creation revision
	      is "XXX". From the branch directory, do:<br>
	      svn merge -rXXX:HEAD https://eblearn.svn.sourceforge.net/svnroot/eblearn/trunk
	    </li>
	    <li>The branch is now locally updated with the latest trunk,
	      commit to apply the changes to the branch.</li>
	  </ul>
	<li>Merging bob's branch into trunk:</li>
	<ul><li>Get branch's creation revision or the latest merging revision:
	    <br>
	    svn log --stop-on-copy</li>
	  <li>
	    Assuming branch's creation revision
	    is "XXX", from the trunk directory, do:<br>
	    svn merge -rXXX:HEAD https://eblearn.svn.sourceforge.net/svnroot/eblearn/branches/bob
	  </li>
	</ul>
	<li>Never commit a broken code in the main trunk (allowed in
	branches).</li>
	<li>Run the tester before a commit to make sure nothing is broken.</li>
	<li>To work temporarly on code that may not work immediately,
	create a svn branch in the branches directory. This way
	you can commit broken code without affecting the main
	trunk. Once your code works, merge your branch into the trunk.</li>
      </ul>
      <h2>Debugging</h2>
      <ul>
        <li>Emacs and GDB form a very convenient debugger: execute
        debug.sh to open Emacs in a debugging setting. In the top left
        window, use 'file my_exe' to load your executable, 'r
        my_arguments' to run it, 'break my_main.cpp:42' to break at
        line 42 in main.cpp (or click on the line the left-hand
        side). After a crash or a break, click on the stack lines in
        the bottom-left window to see the position in the code for
        each layer of the stack. You can also recompile by pressing F12.</li>
	<li>Once in a while, use valgrind to track memory leaks: e.g. 
	valgrind ./tester</li>
      </ul>
      <h2>Testing</h2>
      <ul>
	<li>When writing a new module or new code, add some unit tests
	in the tester (eblearn/tester) that test the basic
	functionalities of the code, to ease the detection of new
	bugs.</li>
	<li>Regularly run the tester when adding code.</li>
      </ul>
      <h2>Coding Style</h2>
      <ul>
	<li>80 columns max (Emacs' default), easier for 80-column
	developers.</li> 
	<li>No unnecessary empty lines between code (user can see more code
	vertically).</li>
	<li>Naming convention: no capital letters, use _ instead (C++
	style).</li> 
	<li>Open braces on the same line as function prototype (Java
	style).</li> 
	<li>Indent code (use "c++"->"indent region" in Emacs).</li>
	<li>Try to keep functions small.</li>
	<li>Avoid code redundancy, instead write sub functions.</li>
	<li>File directories and extensions:</li>
	<ul>
	  <li>include/*.h:   prototypes of classes, funtions, etc.</li>
	  <li>include/*.hpp: template implementations.</li>
	  <li>src/*.cpp:     implementations.</li>
	</ul>
      </ul>
 
   </div>
   </body></html>
