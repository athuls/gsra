<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>SenStore: buildtools.yeanpypa.Rule Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.html"><span>Packages</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.html"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath">
    <ul>
      <li><b>buildtools</b>      </li>
      <li><b>yeanpypa</b>      </li>
      <li><a class="el" href="a00029.html">buildtools.yeanpypa.Rule</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<h1>buildtools.yeanpypa.Rule Class Reference</h1>  </div>
</div>
<div class="contents">
<!-- doxytag: class="buildtools::yeanpypa::Rule" -->
<p>Inherited by <a class="el" href="a00001.html">buildtools.yeanpypa.AndRule</a>, <a class="el" href="a00002.html">buildtools.yeanpypa.AnyOf</a>, <a class="el" href="a00005.html">buildtools.yeanpypa.CallbackParser</a>, <a class="el" href="a00008.html">buildtools.yeanpypa.Combine</a>, <a class="el" href="a00016.html">buildtools.yeanpypa.ErrorRule</a>, <a class="el" href="a00017.html">buildtools.yeanpypa.IgnoreWhite</a>, <a class="el" href="a00019.html">buildtools.yeanpypa.Literal</a>, <a class="el" href="a00020.html">buildtools.yeanpypa.MatchWhite</a>, <a class="el" href="a00021.html">buildtools.yeanpypa.NoneOf</a>, <a class="el" href="a00022.html">buildtools.yeanpypa.OneOrMore</a>, <a class="el" href="a00023.html">buildtools.yeanpypa.Optional</a>, <a class="el" href="a00024.html">buildtools.yeanpypa.OrRule</a>, and <a class="el" href="a00037.html">buildtools.yeanpypa.ZeroOrMore</a>.</p>

<p><a href="a00091.html">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.html#a329d590d140897ba0d6f5f22b9911532">match</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.html#aeefb8a42ce857d7a36ffc11aa22fb4cd">__add__</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.html#a34d5b5d05c264678f427a4524976476d">__or__</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.html#a3a7b96af8afd260ddf5c2b200bec9f3f">setAction</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.html#a061f46b25459d6a954dcc403d92029e5">callAction</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.html#a6cfe1b52ab6665ece50a8642123f7726">hide</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00029.html#a17163b034caa79f4bd6124694dd2d1eb">returnToken</a></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<div class="fragment"><pre class="fragment">
The basic entity of a grammar: the rule.  This class doesn't
provide any parsing functionality on it's own. It merely provides
some basic functions shared by all Rule classes.
</pre></div> <hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="aeefb8a42ce857d7a36ffc11aa22fb4cd"></a><!-- doxytag: member="buildtools::yeanpypa::Rule::__add__" ref="aeefb8a42ce857d7a36ffc11aa22fb4cd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def buildtools.yeanpypa.Rule.__add__ </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>second_rule</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<div class="fragment"><pre class="fragment">
Define an operator to concat two rules. The expressivness of
the 'pseudo-language' defined by the framework heavily relies
on operator overloading. The +-operator serves as a 'followed
by' expression.

@param second_rule: The right operand of the +-operator which
            follows this object in grammar terms.
@type  second_rule: Rule
@return An AndRule-object connecting these two rule appropriately.
</pre></div> 
<p>Reimplemented in <a class="el" href="a00001.html#a19988353e0562ca11c7fba23e2b8257f">buildtools.yeanpypa.AndRule</a>.</p>

</div>
</div>
<a class="anchor" id="a34d5b5d05c264678f427a4524976476d"></a><!-- doxytag: member="buildtools::yeanpypa::Rule::__or__" ref="a34d5b5d05c264678f427a4524976476d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def buildtools.yeanpypa.Rule.__or__ </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>second_rule</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<div class="fragment"><pre class="fragment">
Define an operator to concat two rules via OR. The
expressivness of the 'pseudo-language' defined by the
framework heavily relies on operator overloading. The
|-operator serves as a 'OR' expression, defining two
alternative matches.

@param second_rule: The right operand of the +-operator which
            follows this object in grammar terms.
@type  second_rule: Rule
@return An OrRule-object connecting these two rule appropriately.
</pre></div> 
<p>Reimplemented in <a class="el" href="a00024.html#a71c9630b526c03494fa13c515cb543db">buildtools.yeanpypa.OrRule</a>.</p>

</div>
</div>
<a class="anchor" id="a061f46b25459d6a954dcc403d92029e5"></a><!-- doxytag: member="buildtools::yeanpypa::Rule::callAction" ref="a061f46b25459d6a954dcc403d92029e5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def buildtools.yeanpypa.Rule.callAction </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>param</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>pos</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<div class="fragment"><pre class="fragment">
Call the action attached to this rule. The given parameter is passed to
the action.

@param param: The parameter (token list) to pass to the action.
@param pos: position in file
@type  param: list
</pre></div> 
</div>
</div>
<a class="anchor" id="a6cfe1b52ab6665ece50a8642123f7726"></a><!-- doxytag: member="buildtools::yeanpypa::Rule::hide" ref="a6cfe1b52ab6665ece50a8642123f7726" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def buildtools.yeanpypa.Rule.hide </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<div class="fragment"><pre class="fragment">
Tell this rule to not produce any token output. The rule
matches its token as normal but does not return any of them

@return self
</pre></div> 
</div>
</div>
<a class="anchor" id="a329d590d140897ba0d6f5f22b9911532"></a><!-- doxytag: member="buildtools::yeanpypa::Rule::match" ref="a329d590d140897ba0d6f5f22b9911532" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def buildtools.yeanpypa.Rule.match </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>input_reader</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<div class="fragment"><pre class="fragment">
Match the given rule in the string from the given position on.

@param input_reader: The InputReader to read the input from.
@type  input_reader: InputReader
@return: a list of token the rule matched.
</pre></div> 
</div>
</div>
<a class="anchor" id="a17163b034caa79f4bd6124694dd2d1eb"></a><!-- doxytag: member="buildtools::yeanpypa::Rule::returnToken" ref="a17163b034caa79f4bd6124694dd2d1eb" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def buildtools.yeanpypa.Rule.returnToken </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>token</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<div class="fragment"><pre class="fragment">
Helper function encapsulating the hide()-functionality. This method
returns the token if self.hide is False and None otherwise.

@param token: The toden to return
@return: token if self.hide==False, None otherwise
</pre></div> 
</div>
</div>
<a class="anchor" id="a3a7b96af8afd260ddf5c2b200bec9f3f"></a><!-- doxytag: member="buildtools::yeanpypa::Rule::setAction" ref="a3a7b96af8afd260ddf5c2b200bec9f3f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def buildtools.yeanpypa.Rule.setAction </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>action</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<div class="fragment"><pre class="fragment">
Set the action to execute on a rule match. Action may be any callable
that takes a one parameter. The parameter is a list of token the rule
matched. The action may manipulate the token returned by returning
a different token list.

@param action: The callable to execute if the rule matched.
@type  action: Callable
@return: a reference to the rule itself
</pre></div> 
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>extras/senstore/buildtools/yeanpypa.py</li>
</ul>
</div>
<hr class="footer"/><address class="footer"><small>Generated on Tue Sep 7 2010 11:34:34 for SenStore by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.1 </small></address>
</body>
</html>
