/* -*- c++ -*- */
/* $Id: SenStore-fem-enums.dbd,v 1.4 2010/06/16 19:01:13 glinden Exp $ */
/* SenStore database parts for storing sensor data. */

/** Supported material types. */
enum MaterialType {
  /** Elastic material (default). */
  ELASTIC,
  /** Orthotropic material. */
  ORTHOTROPIC,
  /** Nonlinear-elastic material. */
  NONLINEARELASTIC,
  /** Plastic bilinear material. */
  PLASTICBILINEAR,
  /** Plastic muli-linear material. */
  PLASTICMULTILINEAR,
  /** Thermo isotropic material. */
  THERMOISOTROPIC,
  /** Thermo orthotropic material. */
  THERMOORTHOTROPIC
};

/** Supported units. */
enum Unit {
  /** Meter (SI) (default). */
  METER,
  /** Kilogram (SI). */
  KILOGRAM,
  /** Newton (SI). */
  NEWTON,
  /** Foot (1200/3937 meters; imperial). */
  FOOT,
  /** Pound (international avoirdupois pound; 0.45359237 kilogram). */
  POUND,
  /** 1000 Pounds (imperial). */
  KILOPOUND,
  /** Mass that accelerates by 1 ft/s^2 (imperial) */
  SLUG,
  /** 1000 Slugs (imperial). */
  KILOSLUG,
};

/** Available quantities (degrees of freedom). */
enum Quantity {
  /** X displacement (default). */
  XDISPLACEMENT,
  /** Y displacement. */
  YDISPLACEMENT,
  /** Z displacement. */
  ZDISPLACEMENT,
  /** X rotation */
  XROTATION,
  /** Y rotation */
  YROTATION,
  /** Z rotation */
  ZROTATION,
  /** X force */
  XFORCE,
  /** Y force */
  YFORCE,
  /** Z force */
  ZFORCE,
  /** Raw (undefined). */
  RAW,
};

/** Supported coordinate system types. */
enum CoordinateSystemType {
  /** Cartesian coordinate system (default) */
  CARTESIAN,
  /** Spherical coordinate system */
  SPHERICAL,
  /** Cylindrical coordinate system */
  CYLINDRICAL,
};

/** Supported boundary types. */
enum BoundaryType {
  /** Free to move (default). */
  FREE,
  /** Fixed. */
  FIXED,
};

/** Supported cross sections. */
enum SectionType {
  BOX,
  PROPERTIES,
  RECTANGULAR,
  PIPE,
  I,
  L,
  U
};

/** Supported group types. */
enum GroupType {
  BEAM,
  TRUSS,
  GENERAL,
  ISOBEAM,
  PLATE,
  SHELL,
  SPRING,
  THREEDSOLID,
  TWODSOLID
};
/* -*- c++ -*- */
/* $Id: SenStore-fem-extra.dbd,v 1.1 2010/05/27 21:51:53 glinden Exp $ */
/* SenStore database parts for FE modeling, in addition to the autogenerated parts. */

/** Structure, such as a bridge. */
class Structure {
  /** Short name. */
  string Name;
  /** One-line description. */
  string Description;
  /** Type of structure, e.g. suspension bridge. */
  string Type;
  /** Unit of distance */
  Unit *DistanceUnit;
  /** Unit of force */
  Unit *ForceUnit;
  /** Unit of weight */
  Unit *WeightUnit;
};

/** Finite element model degrees of freedom. */
class FEMDof {
  /** Structure */
  Structure *Structure;
  /** Local DOF number. */
  int32 LocalId;
  /** Finite element node. */
  FEMNode *Node;
  /** Direction of motion. */
  Quantity *Direction;
};

/** Linear mapping between two node-related quantities. */
array MappingMatrix(float64) {
  /** Parent structure */
  Structure *Structure;
  /** Short name */
  string Name;
  /** Description */
  string Description;
  /** Output quantity */
  Quantity *OutputQuantity;
  /** Input quantity */
  Quantity *InputQuantity;
  axes {
  /** Output node */
  FEMNode *OutputNode;
  /** Input node */
  FEMNode *InputNode;
  };
};
/* -*- c++ -*- */
class FEMNodalMass {
    string Description;
    float64 Mass1;
    float64 Mass2;
    float64 Mass3;
    float64 Mass4;
    float64 Mass5;
    float64 Mass6;
     FEMNode *Node;
};
class FEMNLElasticStrainStress {
    int32 MaterialID;
    int32 RecordNumber;
    float64 Strain;
    float64 Stress;
};
class FEMBoundary {
     FEMNode *Node;
     BoundaryType *Ovalization;
     BoundaryType *Phi;
     BoundaryType *Rx;
     BoundaryType *Ry;
     BoundaryType *Rz;
     BoundaryType *Ux;
     BoundaryType *Uy;
     BoundaryType *Uz;
    string Warping;
};
class FEMSectionPipe {
    float64 Diameter;
    float64 SC;
    int32 SectionID;
    float64 SSarea;
    float64 TC;
    float64 Thickness;
    float64 Torfac;
    float64 TSarea;
};
class FEMCoordSystem {
    float64 AX;
    float64 AY;
    float64 AZ;
    float64 BBY;
    float64 BX;
    float64 BZ;
    string Description;
    int16 Mode;
    int32 P1;
    int32 P2;
    int32 P3;
    string Type;
    float64 Xorigin;
    float64 Yorigin;
    float64 Zorigin;
    int32 LocalID;
};
class FEMNode {
    string Description;
     FEMCoordSystem *System;
    float64 X;
    float64 Y;
    float64 Z;
    int32 LocalID;
};
class FEMTruss {
    string Description;
    int32 ElementID;
    float64 Epsin;
    float64 Gapwidth;
     FEMGroup *Group;
     FEMMaterial *Material;
     FEMNode *N1;
     FEMNode *N2;
    int32 RecordNmb;
    string Save;
    float64 SectionArea;
    float64 TBirth;
    float64 TDeath;
};
class FEMTimeFunctionData {
    float64 DataTime;
    int16 GMRecordID;
    int32 RecordNmb;
    int32 TimeFunctionID;
    float64 TimeValue;
};
class FEMPlasticMlMaterials {
    float64 ALPHA;
    float64 Density;
    float64 E;
    string Hardening;
    int32 MaterialID;
    float64 NU;
    float64 TREF;
};
class FEMPlateGroup {
    string Displacement;
     FEMGroup *Group;
    string IniStrain;
    int32 MaterialID;
    string Result;
};
class FEMBeam {
     FEMNode *AuxNode;
    string Description;
    int32 ElementID;
    int32 EndRelease;
    float64 Epsin;
     FEMGroup *Group;
    float64 IRigidEnd;
    float64 JRigidEnd;
    int32 MaterialID;
     FEMNode *Node1;
     FEMNode *Node2;
    int32 RecordNmb;
    string Save;
    int32 SectionID;
    int32 Subdivision;
    float64 TBirth;
    float64 TDeath;
};
class FEMCurvMomentData {
    float64 Curvature;
    int32 CurvMomentID;
    float64 Moment;
    int32 RecordNmb;
};
class FEMPropertysets {
    float64 C;
    string Description;
    float64 K;
    float64 M;
    int32 NC;
    int32 NK;
    int32 NM;
    string Nonlinear;
    int32 PropertysetID;
    float64 S;
};
class FEMOrthotropicMaterial {
    float64 Density;
    float64 EA;
    float64 EB;
    float64 EC;
    float64 GAB;
    float64 GAC;
    float64 GBC;
     FEMMaterial *Material;
    float64 NUAB;
    float64 NUAC;
    float64 NUBC;
};
class FEMAppliedLoads {
    int32 AppliedLoadNmb;
    float64 ArrivalTime;
    int16 LoadID;
    string LoadType;
    string SiteType;
    int32 TimeFunctionID;
};
class FEMThermoOrthData {
    float64 ALPHAA;
    float64 ALPHAB;
    float64 ALPHAC;
    float64 EA;
    float64 EB;
    float64 EC;
    float64 GAB;
    float64 GAC;
    float64 GBC;
    int32 MaterialID;
    float64 NUAB;
    float64 NUAC;
    float64 NUBC;
    int32 RecordNmb;
    float64 Theta;
};
class FEMContactPairs {
    int32 ContactorSurf;
    int32 ContGroupID;
    int32 ContPair;
    float64 FContactor;
    float64 Friction;
    float64 FTarget;
    float64 HeatTransf;
    int32 RecordNmb;
    int32 TargetSurf;
    float64 TBirth;
    float64 TDeath;
};
class FEMGeneral {
    string Description;
    int32 ElementID;
     FEMGroup *Group;
    int32 MatrixSet;
    int16 NodeAmount;
    int32 RecordNmb;
    string Save;
};
class FEMBeamNode {
    string Displacement;
     FEMGroup *Group;
    string IniStrain;
    int32 MaterialID;
    string MC;
    int32 MCrigidity;
    float64 REmultiplyer;
    string Result;
    string REtype;
    int16 RINT;
    int32 SectionID;
    int16 SINT;
    int16 TINT;
};
class FEMSectionRect {
    float64 Height;
    string IShear;
    float64 SC;
    int32 SectionID;
    float64 SSarea;
    float64 TC;
    float64 Torfac;
    float64 TSarea;
    float64 Width;
};
class FEMBeamLoad {
    float64 ArrivalTime;
    int16 DeformDepend;
    int16 DirectFilter;
    int32 ElementID;
    int16 Face;
     FEMGroup *Group;
    float64 P1;
    float64 P2;
    int32 RecordNmb;
    int32 TimeFunctionID;
};
class FEMLoadMassProportional {
    float64 AX;
    float64 AY;
    float64 AZ;
    int16 LoadID;
    float64 Magnitude;
     @parent Structure *Structure;
};
class FEMLink {
    string Description;
    string Displacement;
     FEMNode *MasterNode;
    int32 RLID;
     FEMNode *SlaveNode;
};
class FEMAxesNode {
    int32 AxNodeID;
     FEMGroup *Group;
     FEMNode *Node1;
     FEMNode *Node2;
     FEMNode *Node3;
    int32 RecordNmb;
};
class FEMNMTimeMass {
    float64 Mass;
    int32 PropertyID;
    int32 RecordNmb;
    float64 TimeValue;
};
class FEMAppliedDisplacement {
    float64 ArrivalTime;
    string Description;
    int16 Direction;
    float64 Factor;
     FEMNode *Node;
    int32 RecordNmb;
    int32 TimeFunctionID;
};
class FEMTimeFunctions {
    string Description;
    int32 TimeFunctionID;
};
class FEMForceStrainData {
    float64 Force;
    int32 ForceAxID;
    int32 RecordNmb;
    float64 Strain;
};
class FEMSkewDOF {
    string Description;
     FEMNode *Node;
    int32 SkewSystemID;
};
class FEMSectionI {
    float64 Height;
    float64 SC;
    int32 SectionID;
    float64 SSarea;
    float64 TC;
    float64 Thick1;
    float64 Thick2;
    float64 Thick3;
    float64 Torfac;
    float64 TSarea;
    float64 Width1;
    float64 Width2;
};
class FEMPlasticBilinearMaterial {
    float64 Alpha;
    float64 Density;
    float64 E;
    float64 EPA;
    float64 ET;
    string Hardening;
     FEMMaterial *Material;
    float64 NU;
    float64 TRef;
    float64 Yield;
};
class FEMMTForceData {
    float64 Force;
    int32 MomentRID;
    int32 RecordNmb;
    int32 TwistMomentID;
};
class FEMShellPressure {
    float64 ArrivalTime;
    int16 DeformDepend;
    string Description;
    int16 DirectFilter;
    int32 ElementID;
    int16 Face;
     FEMGroup *Group;
    int32 Nodaux;
    float64 P1;
    float64 P2;
    float64 P3;
    float64 P4;
    int32 RecordNmb;
    int32 TimeFunctionID;
};
class FEMMatrices {
    string Description;
    int32 Lump;
    int32 MatrixID;
    string MatrixType;
    int32 ND;
    int32 NS;
};
class FEMDamping {
    float64 ALPHA;
    float64 BETA;
     FEMGroup *Group;
};
class FEMMaterial {
    string Description;
     MaterialType *MaterialType;
    int32 LocalID;
     @parent Structure *Structure;
};
class FEMMatrixData {
    float64 Coeff;
    int32 ColumnIndex;
    int32 MatrixID;
    int32 RecordNmb;
    int32 RowIndex;
};
class FEMShellAxesOrtho {
    float64 ALFA;
    int32 AxOrthoID;
     FEMGroup *Group;
    int32 LineID;
    int32 RecordNmb;
};
class FEMEndreleases {
    string Description;
    int32 EndRelease;
    int16 Moment1;
    int16 Moment2;
    int16 Moment3;
    int16 Moment4;
    int16 Moment5;
    int16 Moment6;
};
class FEMTrussGroup {
    string Displacement;
    string GAPS;
     FEMGroup *Group;
    string IniStrain;
     FEMMaterial *Material;
    float64 SectionArea;
};
class FEMInitialTemperature {
     FEMNode *Node;
    float64 Temperature;
};
class FEMThermoIsoMaterials {
    float64 Density;
    int32 MaterialID;
    float64 TREF;
};
class FEMThermoIsoData {
    float64 ALPHA;
    float64 E;
    int32 MaterialID;
    float64 NU;
    int32 RecordNmb;
    float64 Theta;
};
class FEMContactGroup3 {
    int32 ContGroupID;
    float64 Depth;
    string Description;
    string Forces;
    float64 Friction;
    string IniPenetration;
    string NodeToNode;
    float64 Offset;
    string PenetrAlgorithm;
    float64 TBirth;
    float64 TDeath;
    string Tied;
    float64 TiedOffset;
    float64 Tolerance;
    string Tractions;
};
class FEMNLElasticMaterials {
    int32 Dcurve;
    float64 Density;
    int32 MaterialID;
};
class FEMPlate {
    string Description;
    int32 ElementID;
    float64 Flex11;
    float64 Flex12;
    float64 Flex22;
     FEMGroup *Group;
    int32 MaterialID;
    float64 Meps11;
    float64 Meps12;
    float64 Meps22;
     FEMNode *N1;
     FEMNode *N2;
     FEMNode *N3;
    int32 RecordNmb;
    string Save;
    float64 TBirth;
    float64 TDeath;
    float64 Thick;
};
class FEMIsoBeam {
     FEMNode *AUX;
    string Description;
    int32 ElementID;
    float64 Epaxl;
    float64 Ephoop;
     FEMGroup *Group;
    int32 MaterialID;
     FEMNode *N1;
     FEMNode *N2;
     FEMNode *N3;
     FEMNode *N4;
    int16 NodeAmount;
    int32 RecordNmb;
    string Save;
    int32 SectionID;
    float64 TBirth;
    float64 TDeath;
};
class FEMAppliedConcentratedLoad {
    float64 ArrivalTime;
    string Description;
    int16 Direction;
    float64 Factor;
     FEMNode *NodeAux;
     FEMNode *NodeID;
    int32 RecordNmb;
    int32 TimeFunctionID;
};
class FEMTwoDSolidGroup {
     FEMNode *AuxNode;
    string Displacement;
     FEMGroup *Group;
    int32 MaterialID;
    string Result;
    string Subtype;
};
class FEMGroup {
    string Description;
     GroupType *GroupType;
    int32 LocalID;
     @parent Structure *Structure;
};
class FEMProperties {
    string Description;
    int32 PropertyID;
    string PropertyType;
    string Rupture;
    float64 XC;
    float64 XN;
};
class FEMThreeDSolidGroup {
    string Displacement;
     FEMGroup *Group;
    int32 MaterialID;
    string Result;
};
class FEMThreeDSolid {
    string Description;
    int32 ElementID;
     FEMGroup *Group;
    int32 MaterialID;
    int32 Maxes;
     FEMNode *N1;
     FEMNode *N10;
     FEMNode *N11;
     FEMNode *N12;
     FEMNode *N13;
     FEMNode *N14;
     FEMNode *N15;
     FEMNode *N16;
     FEMNode *N17;
     FEMNode *N18;
     FEMNode *N19;
     FEMNode *N2;
     FEMNode *N20;
     FEMNode *N21;
     FEMNode *N22;
     FEMNode *N23;
     FEMNode *N24;
     FEMNode *N25;
     FEMNode *N26;
     FEMNode *N27;
     FEMNode *N3;
     FEMNode *N4;
     FEMNode *N5;
     FEMNode *N6;
     FEMNode *N7;
     FEMNode *N8;
     FEMNode *N9;
    int16 NodeAmount;
    int32 RecordNmb;
    string Save;
    float64 TBirth;
    float64 TDeath;
};
class FEMSectionProp {
    float64 Area;
    float64 Rinertia;
    float64 Sarea;
    int32 SectionID;
    float64 Sinertia;
    float64 Tarea;
    float64 Tinertia;
};
class FEMElasticMaterial {
    float64 Alpha;
    float64 Density;
    float64 E;
     FEMMaterial *Material;
    float64 NU;
};
class FEMPoints {
    string Description;
    int32 PointID;
    int32 SystemID;
    float64 X;
    float64 Y;
    float64 Z;
};
class FEMThermoOrthMaterials {
    float64 Density;
    int32 MaterialID;
    float64 TREF;
};
class FEMConstraints {
    int32 ConstraintID;
    string Description;
    string SlaveDOF;
    int32 SlaveNode;
};
class FEMMCrigidities {
    string AcurveType;
    int32 Alpha;
    float64 AxialCF;
    string BcurveType;
    float64 BendingCF;
    int32 Beta;
    float64 Density;
    int32 ForceAxID;
    string Hardening;
    float64 MassArea;
    float64 MassR;
    float64 MassS;
    float64 MassT;
    int32 MomentRID;
    int32 MomentSID;
    int32 MomentTID;
    int32 RigidityID;
    string TcurveType;
    float64 TorsionCF;
};
class FEMSkeySysNode {
    string Description;
     FEMNode *Node1;
     FEMNode *Node2;
     FEMNode *Node3;
    int32 SkewSystemID;
};
class FEMIsoBeamGroup {
    string Displacement;
     FEMGroup *Group;
    string IniStrain;
    int32 MaterialID;
    string Result;
    int32 SectionID;
};
class FEMShellDOF {
    string DOFnumber;
     FEMNode *Node;
    int32 VectorID;
};
class FEMCrossSections {
    string Description;
    int32 SectionID;
    string SectionType;
};
class FEMTwistMomentData {
    float64 Moment;
    int32 RecordNmb;
    float64 Twist;
    int32 TwistMomentID;
};
class FEMShell {
    string Description;
    int32 ElementID;
     FEMGroup *Group;
     FEMMaterial *Material;
     FEMNode *N1;
     FEMNode *N2;
     FEMNode *N3;
     FEMNode *N4;
     FEMNode *N5;
     FEMNode *N6;
     FEMNode *N7;
     FEMNode *N8;
     FEMNode *N9;
    int16 NodeAmount;
    int32 RecordNmb;
    string Save;
    float64 T1;
    float64 T2;
    float64 T3;
    float64 T4;
    float64 T5;
    float64 T6;
    float64 T7;
    float64 T8;
    float64 T9;
    float64 TBirth;
    float64 TDeath;
};
class FEMNTNContact {
    int32 ContactorNode;
    int32 ContGroupID;
    int32 ContPair;
    string PrintRes;
    int32 RecordNmb;
    string SaveRes;
    int32 TargetNode;
    float64 TargetNx;
    float64 TargetNy;
    float64 TargetNz;
};
class FEMShellLayer {
     FEMGroup *Group;
    int32 LayerNumber;
    int32 MaterialID;
    float64 PThick;
    int32 RecordNmb;
};
class FEMSkewSysAngles {
    string Description;
    float64 PHI;
    int32 SkewSystemID;
    float64 THETA;
    float64 XSI;
};
class FEMGroundMotionRecord {
    string Description;
    int16 GMRecordID;
    string GMRecordName;
};
class FEMGeneralGroup {
     FEMGroup *Group;
    int32 MatrixSet;
    string Result;
    string SkewSystem;
};
class FEMTwoDSolid {
    float64 Bet;
    string Description;
    int32 ElementID;
     FEMGroup *Group;
    int32 MaterialID;
     FEMNode *N1;
     FEMNode *N2;
     FEMNode *N3;
     FEMNode *N4;
     FEMNode *N5;
     FEMNode *N6;
     FEMNode *N7;
     FEMNode *N8;
     FEMNode *N9;
    int16 NodeAmount;
    int32 RecordNmb;
    string Save;
    float64 TBirth;
    float64 TDeath;
    float64 Thick;
};
class FEMAppliedTemperature {
    float64 ArrivalTime;
    float64 Factor;
     FEMNode *Node;
    int32 RecordNmbr;
    int32 TimeFunctionID;
};
class FEMMatrixSets {
    int32 Damping;
    string Description;
    int32 Mass;
    int32 MatrixSetID;
    int32 Stiffness;
    int32 Stress;
};
class FEMConstraintCoef {
    float64 Coefficient;
    int32 ConstraintID;
    string Description;
    string MasterDOF;
    int32 MasterNode;
    int32 RecordNmb;
};
class FEMSectionBox {
    float64 Height;
    float64 SC;
    int32 SectionID;
    float64 SSarea;
    float64 TC;
    float64 Thick1;
    float64 Thick2;
    float64 Torfac;
    float64 TSarea;
    float64 Width;
};
class FEMNKDisplForce {
    float64 Displacement;
    float64 Force;
    int32 PropertyID;
    int32 RecordNmb;
};
class FEMPlasticStrainStress {
    int32 MaterialID;
    int32 RecordNumber;
    float64 Strain;
    float64 Stress;
};
class FEMShellAxesOrthoData {
    int32 AxOrthoID;
    int32 ElementID;
    int32 RecordNmb;
};
class FEMGeneralNode {
    int32 ElementID;
     FEMGroup *Group;
    int16 LocalNmb;
     FEMNode *Node;
    int32 RecordNmb;
};
class FEMStrLines {
    int32 LineID;
    int32 P1;
    int32 P2;
};
class FEMContactSurface {
    int32 ContGroupID;
    int32 ContSegment;
    int32 ContSurface;
     FEMNode *N1;
     FEMNode *N2;
     FEMNode *N3;
     FEMNode *N4;
    int32 RecordNmb;
};
class FEMMCForceData {
    int32 CurvMomentID;
    float64 Force;
    int32 MomentSTID;
    int32 RecordNmb;
};
class FEMSpring {
    float64 AX;
    float64 AY;
    float64 AZ;
    string Description;
    int32 ElementID;
     FEMGroup *Group;
    int16 ID1;
    int16 ID2;
     FEMNode *N1;
     FEMNode *N2;
    int32 PropertySet;
    int32 RecordNmb;
    string Save;
    float64 TBirth;
    float64 TDeath;
};
class FEMSpringGroup {
    string Bolt;
     FEMGroup *Group;
    string Nonlinear;
    int32 PropertySet;
    string Result;
    string SkewSystem;
};
class FEMShellGroup {
    string Displacement;
     FEMGroup *Group;
     FEMMaterial *Material;
    int32 NLayers;
    string Result;
    int16 SectionResult;
    string StressReference;
    float64 Thickness;
};
/* -*- c++ -*- */
/* $Id: SenStore-sensor-data.dbd,v 1.4 2010/06/30 01:00:44 glinden Exp $ */
/* SenStore database parts for storing sensor data. */

/** Supported sensor types. */
enum SensorType {
  /** Accelerometer, measuring linear acceleration. */
  ACCELEROMETER,
  /** Anemometer, measuring wind speed. */
  ANEMOMETER,
  /** Wind vane, measuring wind direction. */
  WINDVANE,
  /** Strain gauge. */
  STRAINGAUGE,
};

/** Data acquisition unit (e.g. Narada node). */
class DaqUnit {
  string Model;
  string Identifier;
};

/** Data acquisition unit channel. */
class DaqUnitChannel {
  /** Corresponding data acquisition unit. */
  @parent DaqUnit *Unit;
  /** Local channel number. */
  int16    Number;
};

/** Data acquisition unit raw channel data. */
signal DaqUnitChannelData(int32) {
  /** Parent sensor */
  @parent DaqUnitChannel *Channel;
  axes {
  /** Subchannels */
    Quantity *SubChannels;
  };
};

class Sensor {
  SensorType *Type;
  string Model;
  string Identifier;
};

class Transducer {
  string Model;
  string Identifier;
};

class Experiment {
  int16 Frequency;
  int32 Duration;
  int32 BufferData;
};

class Cycle {
  timestamp Time;
  Experiment *Experiment;
};

class SensorTimeData {
  Structure *Structure;
  Sensor *Sensor;
  int16 Channel;
  timestamp StartTime;
  string Status;
  FEMNode *Node;
  /* unique {
  Sensor, Structure, StartTime;
  }; */
};

class TransducerTimeData {
  Transducer *Transducer;
  Sensor *Sensor;
  FEMNode *Node;
  int16 Orientation;
  int32 Amplification;
  int16 Channel;
  string Filter;
  timestamp StartTime;
  string Status;
  /* unique {
  Transducer, Sensor, StartTime;
  }; */
};

class ExperimentStructureData {
  Experiment *Experiment;
  Structure *Structure;
  timestamp StartTime;
  string Status;
  /* unique {
  Experiment, Structure, StartTime;
  }; */
};

class TransducerCycleData {
  Transducer *Transducer;
  Cycle *Cycle;
  float32 SoftwareScaling;
  /* unique {
  Transducer, Cycle;
  }; */
};

/** Multi-axis accelerometer measurement data. */
signal AccelMeas(float32) {
  /** Parent sensor */
  Sensor *Sensor;
  /** Short name */
  string Name;
  /** Description */
  string Description;
  axes {
  /** Directions */
    Quantity *Direction;
  };
};
